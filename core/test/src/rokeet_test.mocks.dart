// Mocks generated by Mockito 5.0.7 from annotations
// in rokeetui_core/test/src/rokeet_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:ui' as _i7;

import 'package:flutter/src/foundation/diagnostics.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/widgets.dart';
import 'package:mockito/mockito.dart' as _i1;
import 'package:rokeetui_core/src/actions/action.dart' as _i10;
import 'package:rokeetui_core/src/actions/actions.performer.dart' as _i11;
import 'package:rokeetui_core/src/model.dart' as _i5;
import 'package:rokeetui_core/src/network/rokeet_api.dart' as _i8;
import 'package:rokeetui_core/src/pages/page.dart' as _i6;
import 'package:rokeetui_core/src/rokeet.dart' as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeRokeet extends _i1.Fake implements _i2.Rokeet {}

class _FakeBuildContext extends _i1.Fake implements _i3.BuildContext {}

class _FakeWidget extends _i1.Fake implements _i3.Widget {
  @override
  String toString({_i4.DiagnosticLevel minLevel = DiagnosticLevel.info}) {
    return super.toString();
  }
}

class _FakeDiagnosticsNode extends _i1.Fake implements _i4.DiagnosticsNode {
  @override
  String toString({_i4.TextTreeConfiguration? parentConfiguration, _i4.DiagnosticLevel minLevel = DiagnosticLevel.info}) {
    return super.toString();
  }
}

class _FakeRInit extends _i1.Fake implements _i5.RInit {}

class _FakeRStep extends _i1.Fake implements _i5.RStep {}

/// A class which mocks [RState].
///
/// See the documentation for Mockito's code generation for more information.
class MockRState<T extends _i6.AbstractRokeetPage, D> extends _i1.Mock
    implements _i6.RState<T, D> {
  MockRState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(D? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i2.Rokeet get rokeet => (super.noSuchMethod(Invocation.getter(#rokeet),
      returnValue: _FakeRokeet()) as _i2.Rokeet);
  @override
  set rokeet(_i2.Rokeet? _rokeet) =>
      super.noSuchMethod(Invocation.setter(#rokeet, _rokeet),
          returnValueForMissingStub: null);
  @override
  T get widget =>
      (super.noSuchMethod(Invocation.getter(#widget), returnValue: null) as T);
  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext()) as _i3.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  bool isLoading() =>
      (super.noSuchMethod(Invocation.method(#isLoading, []), returnValue: false)
          as bool);
  @override
  _i3.Widget loadingWidget() =>
      (super.noSuchMethod(Invocation.method(#loadingWidget, []),
          returnValue: _FakeWidget()) as _i3.Widget);
  @override
  void onDataLoaded(D? data) =>
      super.noSuchMethod(Invocation.method(#onDataLoaded, [data]),
          returnValueForMissingStub: null);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  void didUpdateWidget(T? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i7.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget()) as _i3.Widget);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      (super.noSuchMethod(
          Invocation.method(#toString, [], {#minLevel: minLevel}),
          returnValue: '') as String);
  @override
  _i4.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i4.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode()) as _i4.DiagnosticsNode);
}

/// A class which mocks [RokeetApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockRokeetApi extends _i1.Mock implements _i8.RokeetApi {
  MockRokeetApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? _isLoading) =>
      super.noSuchMethod(Invocation.setter(#isLoading, _isLoading),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i5.RInit> initRokeet(Map<String, String>? params) =>
      (super.noSuchMethod(Invocation.method(#initRokeet, [params]),
              returnValue: Future<_i5.RInit>.value(_FakeRInit()))
          as _i9.Future<_i5.RInit>);
  @override
  _i9.Future<_i5.RStep> getStep(String? id, Map<String, String>? params) =>
      (super.noSuchMethod(Invocation.method(#getStep, [id, params]),
              returnValue: Future<_i5.RStep>.value(_FakeRStep()))
          as _i9.Future<_i5.RStep>);
}

/// A class which mocks [RActionPerformer].
///
/// See the documentation for Mockito's code generation for more information.
class MockRActionPerformer<A extends _i10.RAction<dynamic>> extends _i1.Mock
    implements _i11.RActionPerformer<A> {
  MockRActionPerformer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void performAction(_i2.Rokeet? rokeet, A? action) =>
      super.noSuchMethod(Invocation.method(#performAction, [rokeet, action]),
          returnValueForMissingStub: null);
}
