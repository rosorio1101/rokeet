// Mocks generated by Mockito 5.1.0 from annotations
// in rokeet/test/src/rokeet_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i14;

import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i3;
import 'package:flutter/rendering.dart' as _i4;
import 'package:flutter/scheduler.dart' as _i8;
import 'package:flutter/src/widgets/focus_manager.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rokeet/src/actions/action.dart' as _i11;
import 'package:rokeet/src/actions/actions.performer.dart' as _i12;
import 'package:rokeet/src/model.dart' as _i2;
import 'package:rokeet/src/network/rokeet_api.dart' as _i9;
import 'package:rokeet/src/pages/page.dart' as _i13;
import 'package:rokeet/src/rokeet.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppConfig_0 extends _i1.Fake implements _i2.AppConfig {}

class _FakeRStep_1 extends _i1.Fake implements _i2.RStep {}

class _FakeWidget_2 extends _i1.Fake implements _i3.Widget {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_3 extends _i1.Fake implements _i3.InheritedWidget {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_4 extends _i1.Fake implements _i4.DiagnosticsNode {
  @override
  String toString(
          {_i5.TextTreeConfiguration? parentConfiguration,
          _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeRokeet_5 extends _i1.Fake implements _i6.Rokeet {}

class _FakeBuildContext_6 extends _i1.Fake implements _i3.BuildContext {}

class _FakeFocusScopeNode_7 extends _i1.Fake implements _i7.FocusScopeNode {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeValueNotifier_8<T> extends _i1.Fake implements _i5.ValueNotifier<T> {
}

class _FakeNavigator_9 extends _i1.Fake implements _i3.Navigator {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeTicker_10 extends _i1.Fake implements _i8.Ticker {
  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [RokeetApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockRokeetApi extends _i1.Mock implements _i9.RokeetApi {
  MockRokeetApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? _isLoading) =>
      super.noSuchMethod(Invocation.setter(#isLoading, _isLoading),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i2.AppConfig> getApp(String? clientId, String? clientSecret) =>
      (super.noSuchMethod(Invocation.method(#getApp, [clientId, clientSecret]),
              returnValue: Future<_i2.AppConfig>.value(_FakeAppConfig_0()))
          as _i10.Future<_i2.AppConfig>);
  @override
  _i10.Future<_i2.RStep> getStep(String? stepId) =>
      (super.noSuchMethod(Invocation.method(#getStep, [stepId]),
              returnValue: Future<_i2.RStep>.value(_FakeRStep_1()))
          as _i10.Future<_i2.RStep>);
}

/// A class which mocks [RActionPerformer].
///
/// See the documentation for Mockito's code generation for more information.
class MockRActionPerformer<A extends _i11.RAction<dynamic>> extends _i1.Mock
    implements _i12.RActionPerformer<A> {
  MockRActionPerformer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void performAction(_i6.Rokeet? rokeet, A? action) =>
      super.noSuchMethod(Invocation.method(#performAction, [rokeet, action]),
          returnValueForMissingStub: null);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget => (super.noSuchMethod(Invocation.getter(#widget),
      returnValue: _FakeWidget_2()) as _i3.Widget);
  @override
  bool get debugDoingBuild => (super
          .noSuchMethod(Invocation.getter(#debugDoingBuild), returnValue: false)
      as bool);
  @override
  _i3.InheritedWidget dependOnInheritedElement(_i3.InheritedElement? ancestor,
          {Object? aspect}) =>
      (super.noSuchMethod(
          Invocation.method(
              #dependOnInheritedElement, [ancestor], {#aspect: aspect}),
          returnValue: _FakeInheritedWidget_3()) as _i3.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i3.Element)? visitor) =>
      super.noSuchMethod(Invocation.method(#visitAncestorElements, [visitor]),
          returnValueForMissingStub: null);
  @override
  void visitChildElements(_i3.ElementVisitor? visitor) =>
      super.noSuchMethod(Invocation.method(#visitChildElements, [visitor]),
          returnValueForMissingStub: null);
  @override
  _i4.DiagnosticsNode describeElement(String? name,
          {_i5.DiagnosticsTreeStyle? style =
              _i5.DiagnosticsTreeStyle.errorProperty}) =>
      (super.noSuchMethod(
          Invocation.method(#describeElement, [name], {#style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
  @override
  _i4.DiagnosticsNode describeWidget(String? name,
          {_i5.DiagnosticsTreeStyle? style =
              _i5.DiagnosticsTreeStyle.errorProperty}) =>
      (super.noSuchMethod(
          Invocation.method(#describeWidget, [name], {#style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {Type? expectedAncestorType}) =>
      (super.noSuchMethod(
          Invocation.method(#describeMissingAncestor, [],
              {#expectedAncestorType: expectedAncestorType}),
          returnValue: <_i4.DiagnosticsNode>[]) as List<_i4.DiagnosticsNode>);
  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(Invocation.method(#describeOwnershipChain, [name]),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
}

/// A class which mocks [RState].
///
/// See the documentation for Mockito's code generation for more information.
class MockRState<T extends _i13.AbstractRokeetPage, D> extends _i1.Mock
    implements _i13.RState<T, D> {
  MockRState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(D? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i6.Rokeet get rokeet => (super.noSuchMethod(Invocation.getter(#rokeet),
      returnValue: _FakeRokeet_5()) as _i6.Rokeet);
  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  T get widget => throw UnsupportedError(
      '\'widget\' cannot be used without a mockito fallback generator.');
  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_6()) as _i3.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  _i3.Widget getLoadingWidget() =>
      (super.noSuchMethod(Invocation.method(#getLoadingWidget, []),
          returnValue: _FakeWidget_2()) as _i3.Widget);
  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_2()) as _i3.Widget);
  @override
  _i3.Widget buildPage(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#buildPage, [context]),
          returnValue: _FakeWidget_2()) as _i3.Widget);
  @override
  void didUpdateWidget(T? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i14.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i4.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i5.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
}

/// A class which mocks [State].
///
/// See the documentation for Mockito's code generation for more information.
class MockState<T extends _i3.StatefulWidget> extends _i1.Mock
    implements _i3.State<T> {
  MockState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T get widget => throw UnsupportedError(
      '\'widget\' cannot be used without a mockito fallback generator.');
  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_6()) as _i3.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  void didUpdateWidget(T? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i14.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_2()) as _i3.Widget);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i4.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i5.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i3.NavigatorState {
  MockNavigatorState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FocusScopeNode get focusScopeNode =>
      (super.noSuchMethod(Invocation.getter(#focusScopeNode),
          returnValue: _FakeFocusScopeNode_7()) as _i7.FocusScopeNode);
  @override
  _i5.ValueNotifier<bool> get userGestureInProgressNotifier =>
      (super.noSuchMethod(Invocation.getter(#userGestureInProgressNotifier),
              returnValue: _FakeValueNotifier_8<bool>())
          as _i5.ValueNotifier<bool>);
  @override
  bool get userGestureInProgress =>
      (super.noSuchMethod(Invocation.getter(#userGestureInProgress),
          returnValue: false) as bool);
  @override
  _i3.Navigator get widget => (super.noSuchMethod(Invocation.getter(#widget),
      returnValue: _FakeNavigator_9()) as _i3.Navigator);
  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_6()) as _i3.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  bool get restorePending => (super
          .noSuchMethod(Invocation.getter(#restorePending), returnValue: false)
      as bool);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  void restoreState(_i3.RestorationBucket? oldBucket, bool? initialRestore) =>
      super.noSuchMethod(
          Invocation.method(#restoreState, [oldBucket, initialRestore]),
          returnValueForMissingStub: null);
  @override
  void didToggleBucket(_i3.RestorationBucket? oldBucket) =>
      super.noSuchMethod(Invocation.method(#didToggleBucket, [oldBucket]),
          returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void didUpdateWidget(_i3.StatefulWidget? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i10.Future<T?> pushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(
              #restorablePushNamed, [routeName], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i10.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i10.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePopAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i10.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, _i3.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamedAndRemoveUntil, [newRouteName, predicate],
              {#arguments: arguments}),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, _i3.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushNamedAndRemoveUntil,
              [newRouteName, predicate], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i10.Future<T?> push<T extends Object?>(_i3.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#push, [route]),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePush<T extends Object?>(
          _i3.RestorableRouteBuilder<T>? routeBuilder,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(
              #restorablePush, [routeBuilder], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i10.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
          _i3.Route<T>? newRoute,
          {TO? result}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacement, [newRoute], {#result: result}),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
          _i3.RestorableRouteBuilder<T>? routeBuilder,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushReplacement, [routeBuilder],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i10.Future<T?> pushAndRemoveUntil<T extends Object?>(
          _i3.Route<T>? newRoute, _i3.RoutePredicate? predicate) =>
      (super.noSuchMethod(
          Invocation.method(#pushAndRemoveUntil, [newRoute, predicate]),
          returnValue: Future<T?>.value()) as _i10.Future<T?>);
  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
          _i3.RestorableRouteBuilder<T>? newRouteBuilder,
          _i3.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushAndRemoveUntil,
              [newRouteBuilder, predicate], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  void replace<T extends Object?>(
          {_i3.Route<dynamic>? oldRoute, _i3.Route<T>? newRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #replace, [], {#oldRoute: oldRoute, #newRoute: newRoute}),
          returnValueForMissingStub: null);
  @override
  String restorableReplace<T extends Object?>(
          {_i3.Route<dynamic>? oldRoute,
          _i3.RestorableRouteBuilder<T>? newRouteBuilder,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorableReplace, [], {
            #oldRoute: oldRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments
          }),
          returnValue: '') as String);
  @override
  void replaceRouteBelow<T extends Object?>(
          {_i3.Route<dynamic>? anchorRoute, _i3.Route<T>? newRoute}) =>
      super.noSuchMethod(
          Invocation.method(#replaceRouteBelow, [],
              {#anchorRoute: anchorRoute, #newRoute: newRoute}),
          returnValueForMissingStub: null);
  @override
  String restorableReplaceRouteBelow<T extends Object?>(
          {_i3.Route<dynamic>? anchorRoute,
          _i3.RestorableRouteBuilder<T>? newRouteBuilder,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorableReplaceRouteBelow, [], {
            #anchorRoute: anchorRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments
          }),
          returnValue: '') as String);
  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);
  @override
  _i10.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#maybePop, [result]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  void pop<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValueForMissingStub: null);
  @override
  void popUntil(_i3.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void removeRoute(_i3.Route<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#removeRoute, [route]),
          returnValueForMissingStub: null);
  @override
  void removeRouteBelow(_i3.Route<dynamic>? anchorRoute) =>
      super.noSuchMethod(Invocation.method(#removeRouteBelow, [anchorRoute]),
          returnValueForMissingStub: null);
  @override
  void finalizeRoute(_i3.Route<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#finalizeRoute, [route]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStartUserGesture, []),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_2()) as _i3.Widget);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i14.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i4.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i5.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_4()) as _i4.DiagnosticsNode);
  @override
  _i8.Ticker createTicker(_i8.TickerCallback? onTick) =>
      (super.noSuchMethod(Invocation.method(#createTicker, [onTick]),
          returnValue: _FakeTicker_10()) as _i8.Ticker);
  @override
  void registerForRestoration(
          _i3.RestorableProperty<Object?>? property, String? restorationId) =>
      super.noSuchMethod(
          Invocation.method(#registerForRestoration, [property, restorationId]),
          returnValueForMissingStub: null);
  @override
  void unregisterFromRestoration(_i3.RestorableProperty<Object?>? property) =>
      super.noSuchMethod(
          Invocation.method(#unregisterFromRestoration, [property]),
          returnValueForMissingStub: null);
  @override
  void didUpdateRestorationId() =>
      super.noSuchMethod(Invocation.method(#didUpdateRestorationId, []),
          returnValueForMissingStub: null);
}
